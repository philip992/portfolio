%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2394 2394
%%HiResBoundingBox: 0 0 2394 2394
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2394 2394 re
W
q
[0.24 0 0 -0.24 0 2394] cm
q
0 0 9975 9975 re
W*
q
[88.443398 0 0 88.443398 300 300] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
15 0 m
91 0 l
91.245483 0 91.490822 0.006023 91.736008 0.018068 c
91.981194 0.030114 92.225945 0.048167 92.470245 0.072229 c
92.714546 0.096291 92.958115 0.126332 93.200935 0.162352 c
93.443771 0.198373 93.68557 0.240329 93.926338 0.288221 c
94.167114 0.336113 94.406563 0.389883 94.644691 0.449531 c
94.88282 0.509179 95.119339 0.574634 95.354256 0.645895 c
95.589172 0.717156 95.822197 0.794137 96.053329 0.876839 c
96.28447 0.959541 96.513435 1.047863 96.740234 1.141807 c
96.967033 1.23575 97.191383 1.335202 97.4133 1.44016 c
97.635223 1.545119 97.854431 1.655459 98.07093 1.771181 c
98.28743 1.886902 98.500961 2.007865 98.711525 2.13407 c
98.922089 2.260276 99.129425 2.391571 99.333534 2.527955 c
99.537643 2.66434 99.738297 2.80565 99.935478 2.951887 c
100.132652 3.098122 100.326126 3.249108 100.515892 3.404843 c
100.70565 3.560578 100.891479 3.720874 101.073372 3.885732 c
101.255264 4.050591 101.432999 4.219813 101.60659 4.393398 c
101.780174 4.566983 101.949402 4.744722 102.114265 4.926615 c
102.279121 5.108508 102.439415 5.294336 102.595154 5.4841 c
102.750893 5.673863 102.901878 5.867333 103.048111 6.064509 c
103.194344 6.261685 103.335655 6.462331 103.472038 6.666446 c
103.608421 6.87056 103.739716 7.077898 103.865921 7.288458 c
103.992126 7.499018 104.113091 7.712549 104.228813 7.929049 c
104.344528 8.145548 104.454865 8.364756 104.55983 8.586672 c
104.66478 8.808589 104.764229 9.032948 104.858177 9.259748 c
104.952118 9.486548 105.040436 9.715515 105.123146 9.946651 c
105.205849 10.177788 105.282829 10.410814 105.354095 10.64573 c
105.425362 10.880646 105.490814 11.117167 105.550453 11.355296 c
105.610107 11.593426 105.663879 11.832875 105.711769 12.073645 c
105.759659 12.314414 105.801613 12.556213 105.837631 12.799043 c
105.873657 13.041872 105.903702 13.28544 105.927773 13.529743 c
105.951828 13.774047 105.969879 14.018794 105.981926 14.263985 c
105.993973 14.509175 105.999992 14.754514 106 15 c
106 91 l
105.999992 91.245483 105.993973 91.490822 105.981926 91.736008 c
105.969879 91.981194 105.95182 92.225945 105.927765 92.470245 c
105.903702 92.714546 105.873657 92.958115 105.837631 93.200935 c
105.801613 93.443771 105.759659 93.68557 105.711769 93.926338 c
105.663879 94.167114 105.610107 94.406563 105.550461 94.644691 c
105.490814 94.88282 105.425362 95.119339 105.354103 95.354256 c
105.282837 95.589172 105.205856 95.822197 105.123146 96.053329 c
105.040436 96.28447 104.952118 96.513435 104.858177 96.740234 c
104.764229 96.967033 104.66478 97.191383 104.55983 97.4133 c
104.454865 97.635223 104.344528 97.854431 104.228813 98.07093 c
104.113091 98.28743 103.992126 98.500961 103.865921 98.711525 c
103.739716 98.922089 103.608421 99.129425 103.472038 99.333534 c
103.335655 99.537643 103.194344 99.738297 103.048103 99.935478 c
102.901871 100.132652 102.750893 100.326126 102.595154 100.515892 c
102.439415 100.70565 102.279121 100.891479 102.114265 101.073372 c
101.949402 101.255264 101.780174 101.432999 101.60659 101.60659 c
101.432999 101.780174 101.255257 101.949402 101.073364 102.114265 c
100.891472 102.279121 100.70565 102.439415 100.515884 102.595154 c
100.326118 102.750893 100.132645 102.901878 99.935471 103.048111 c
99.738289 103.194344 99.537643 103.335655 99.333534 103.472038 c
99.129425 103.608421 98.922089 103.739716 98.711525 103.865921 c
98.500961 103.992126 98.28743 104.113091 98.07093 104.228813 c
97.854431 104.344528 97.635223 104.454865 97.4133 104.55983 c
97.191383 104.66478 96.967033 104.764229 96.740234 104.858177 c
96.513435 104.952118 96.28447 105.040436 96.053329 105.123146 c
95.822197 105.205849 95.589172 105.282829 95.354256 105.354095 c
95.119339 105.425362 94.88282 105.490814 94.644691 105.550453 c
94.406563 105.610107 94.167114 105.663879 93.926338 105.711769 c
93.68557 105.759659 93.443771 105.801613 93.200943 105.837631 c
92.958115 105.873657 92.714554 105.903702 92.470253 105.927773 c
92.225945 105.951828 91.981194 105.969879 91.736008 105.981926 c
91.490822 105.993973 91.245483 105.999992 91 106 c
15 106 l
14.754514 105.999992 14.509175 105.993973 14.263985 105.981926 c
14.018793 105.969879 13.774046 105.95182 13.529742 105.927765 c
13.285438 105.903702 13.041871 105.873657 12.799042 105.837631 c
12.556212 105.801613 12.314413 105.759659 12.073644 105.711769 c
11.832874 105.663879 11.593426 105.610107 11.355296 105.550461 c
11.117167 105.490814 10.880645 105.425362 10.645729 105.354103 c
10.410813 105.282837 10.177787 105.205856 9.946651 105.123146 c
9.715515 105.040436 9.486548 104.952118 9.259748 104.858177 c
9.032948 104.764229 8.808589 104.66478 8.586672 104.55983 c
8.364756 104.454865 8.145548 104.344528 7.929049 104.228813 c
7.712549 104.113091 7.499019 103.992126 7.288458 103.865921 c
7.077898 103.739716 6.87056 103.608421 6.666446 103.472038 c
6.462331 103.335655 6.261686 103.194344 6.064509 103.048103 c
5.867333 102.901871 5.673864 102.750893 5.4841 102.595154 c
5.294337 102.439415 5.108508 102.279121 4.926615 102.114265 c
4.744722 101.949402 4.566983 101.780174 4.393398 101.60659 c
4.219813 101.432999 4.050591 101.255257 3.885732 101.073364 c
3.720874 100.891472 3.560578 100.70565 3.404843 100.515884 c
3.249108 100.326118 3.098122 100.132645 2.951887 99.935471 c
2.80565 99.738289 2.66434 99.537643 2.527956 99.333534 c
2.391571 99.129425 2.260276 98.922089 2.134071 98.711525 c
2.007865 98.500961 1.886902 98.28743 1.771181 98.07093 c
1.655459 97.854431 1.545119 97.635223 1.44016 97.4133 c
1.335201 97.191383 1.23575 96.967033 1.141807 96.740234 c
1.047863 96.513435 0.959541 96.28447 0.876839 96.053329 c
0.794137 95.822197 0.717156 95.589172 0.645895 95.354256 c
0.574634 95.119339 0.509179 94.88282 0.449531 94.644691 c
0.389883 94.406563 0.336113 94.167114 0.288221 93.926338 c
0.240329 93.68557 0.198373 93.443771 0.162352 93.200943 c
0.126332 92.958115 0.096291 92.714554 0.072229 92.470253 c
0.048167 92.225945 0.030114 91.981194 0.018068 91.736008 c
0.006023 91.490822 0 91.245483 0 91 c
0 15 l
0 14.754514 0.006023 14.509175 0.018068 14.263985 c
0.030114 14.018793 0.048167 13.774046 0.072229 13.529742 c
0.096291 13.285438 0.126332 13.041871 0.162352 12.799042 c
0.198373 12.556212 0.240329 12.314413 0.288221 12.073644 c
0.336113 11.832874 0.389883 11.593426 0.449531 11.355296 c
0.509179 11.117167 0.574634 10.880645 0.645895 10.645729 c
0.717156 10.410813 0.794137 10.177787 0.876839 9.946651 c
0.959541 9.715515 1.047863 9.486548 1.141807 9.259748 c
1.23575 9.032948 1.335202 8.808589 1.44016 8.586672 c
1.545119 8.364756 1.655459 8.145548 1.771181 7.929049 c
1.886902 7.712549 2.007865 7.499019 2.13407 7.288458 c
2.260276 7.077898 2.391571 6.87056 2.527955 6.666446 c
2.66434 6.462331 2.80565 6.261686 2.951887 6.064509 c
3.098122 5.867333 3.249108 5.673864 3.404843 5.4841 c
3.560578 5.294337 3.720874 5.108508 3.885732 4.926615 c
4.050591 4.744722 4.219813 4.566983 4.393398 4.393398 c
4.566983 4.219813 4.744722 4.050591 4.926615 3.885732 c
5.108508 3.720874 5.294336 3.560578 5.4841 3.404843 c
5.673863 3.249108 5.867333 3.098122 6.064509 2.951887 c
6.261685 2.80565 6.462331 2.66434 6.666446 2.527956 c
6.87056 2.391571 7.077898 2.260276 7.288458 2.134071 c
7.499018 2.007865 7.712549 1.886902 7.929049 1.771181 c
8.145548 1.655459 8.364756 1.545119 8.586672 1.44016 c
8.808589 1.335201 9.032948 1.23575 9.259748 1.141807 c
9.486548 1.047863 9.715515 0.959541 9.946651 0.876839 c
10.177788 0.794137 10.410814 0.717156 10.64573 0.645895 c
10.880646 0.574634 11.117167 0.509179 11.355296 0.449531 c
11.593426 0.389883 11.832875 0.336113 12.073645 0.288221 c
12.314414 0.240329 12.556213 0.198373 12.799043 0.162352 c
13.041872 0.126332 13.28544 0.096291 13.529743 0.072229 c
13.774047 0.048167 14.018794 0.030114 14.263985 0.018068 c
14.509175 0.006023 14.754514 0 15 0 c
h
f
Q
q
[24.000212 0 0 24.000212 3796.1243 2970.0044] cm
86.577003 7.027 m
80.377998 68.239998 l
14.344 74.537003 l
80.377998 68.239998 l
86.577003 7.027 l
h
f
68.623001 79.949997 m
75.779999 79.563004 l
68.623001 79.949997 l
h
f
17.152 70.723999 m
77.273003 64.039001 l
82.966003 9.353 l
25.709 26.652 l
17.152 70.723999 l
h
f
86.582001 6.992 m
86.582001 6.988 86.583 6.985 86.583 6.98 c
86.584 6.976 86.584 6.969 86.584999 6.964 c
86.581001 7.004 86.576996 7.027 86.576996 7.027 c
86.576996 7.027 86.577995 7.022 86.578995 7.014 c
86.580002 7.01 86.581001 7.002 86.582001 6.992 c
h
f
86.601997 6.701 m
86.602997 6.673 86.603996 6.651 86.603996 6.621 c
86.602997 6.649 86.601997 6.675 86.601997 6.701 c
h
f
86.486 5.8 m
86.494003 5.824 86.503998 5.846 86.511002 5.87 c
86.503998 5.846 86.495003 5.824 86.486 5.8 c
h
f
86.584999 6.964 m
86.585999 6.955 86.586998 6.946 86.587997 6.935 c
86.587997 6.932001 86.587997 6.929 86.588997 6.926001 c
86.588997 6.922 86.589996 6.913001 86.589996 6.908001 c
86.587997 6.926 86.585999 6.951 86.584999 6.964 c
h
f
86.316002 5.452 m
86.327003 5.466 86.330002 5.486 86.340004 5.501 c
86.255005 5.372 86.152 5.256 86.005005 5.184 c
85.436005 4.854 84.643005 5.068 84.643005 5.068 c
25.58 23.736 l
24.948 24.017 24.24 24.743999 23.965 26.108 c
14.345 74.537003 l
80.378998 68.240005 l
86.577995 7.028004 l
86.577995 7.028004 86.580994 7.005004 86.585999 6.965004 c
86.584999 6.970004 86.584999 6.977004 86.584 6.981003 c
86.583 6.986003 86.583 6.989003 86.583 6.993003 c
86.582001 7.002003 86.581001 7.010004 86.580002 7.015003 c
86.579002 7.023003 86.578003 7.028003 86.578003 7.028003 c
80.377998 68.239998 l
14.344002 74.536995 l
13.185001 80.370995 l
13.187001 80.360992 12.683002 83.005997 13.846002 82.917992 c
53.826 80.752991 l
13.848 82.917992 l
13.921 83.002991 14.195999 83.141991 15.229 83.088989 c
53.852001 80.944992 l
54.931 89.062988 l
54.931 89.062988 55.165001 90.43499 54.452999 91.87899 c
54.054001 92.688988 53.444 93.121994 52.909 93.359993 c
52.805 93.405991 52.705002 93.444992 52.609001 93.47699 c
52.569 93.48999 52.528 93.506989 52.490002 93.51799 c
52.388 93.548988 52.295002 93.570992 52.211002 93.588989 c
52.188004 93.593987 52.161003 93.60099 52.140003 93.604988 c
52.051003 93.621986 51.978004 93.631989 51.923004 93.637985 c
51.917004 93.638985 51.905003 93.640984 51.900005 93.640984 c
51.845005 93.64698 51.810005 93.647987 51.810005 93.647987 c
30.857006 94.520988 l
30.834005 94.520988 30.819006 94.538986 30.798006 94.544991 c
30.755007 94.544991 l
30.739006 94.552994 30.730007 94.567993 30.716007 94.578987 c
30.702007 94.589989 30.691008 94.596985 30.680008 94.610985 c
30.645008 94.651985 30.618008 94.700981 30.618008 94.759987 c
30.618008 94.891991 30.725008 94.998985 30.857008 94.998985 c
68.165009 94.876984 l
68.165009 94.876984 68.615005 94.862984 69.16301 94.622986 c
69.170013 94.619987 69.17601 94.618988 69.183006 94.614983 c
69.305008 94.560982 69.430008 94.487984 69.558006 94.407982 c
69.57901 94.394981 69.599007 94.385979 69.620003 94.371979 c
69.736 94.294975 69.848999 94.197975 69.964005 94.094978 c
69.997002 94.06498 70.030006 94.042976 70.062004 94.010979 c
70.165001 93.909981 70.260002 93.78598 70.355003 93.659981 c
70.394005 93.607979 70.435005 93.56398 70.472 93.50798 c
70.556 93.380981 70.626999 93.23098 70.699997 93.079979 c
70.730995 93.015976 70.768997 92.96698 70.796997 92.89798 c
70.785995 92.89798 l
70.811996 92.834976 70.845993 92.787979 70.869995 92.720978 c
71.579994 90.724976 71.016998 88.582977 71.016998 88.582977 c
68.669998 80.11898 l
76.758995 79.669983 l
76.758995 79.669983 77.908997 79.755981 78.913994 78.959984 c
79.917992 78.163986 80.088997 76.278984 80.088997 76.278984 c
86.858994 7.856987 l
86.859001 7.86 87.193001 5.942 86.316002 5.452 c
h
77.273003 64.039001 m
17.152004 70.723 l
25.709003 26.651001 l
82.966003 9.353 l
77.273003 64.039001 l
h
68.623001 79.949997 m
75.778999 79.561996 l
68.623001 79.949997 l
h
86.511002 5.871 m
86.503998 5.847 86.494003 5.824 86.486 5.801 c
86.495003 5.824 86.503998 5.846 86.511002 5.871 c
h
86.587997 6.935 m
86.586998 6.946 86.585999 6.954 86.584999 6.964 c
86.585999 6.951 86.587997 6.926 86.589996 6.909 c
86.589996 6.914 86.588997 6.922 86.588997 6.927 c
86.587997 6.929 86.587997 6.932 86.587997 6.935 c
h
86.601997 6.701 m
86.602997 6.675 86.603996 6.649 86.603996 6.621 c
86.602997 6.651 86.602997 6.673 86.601997 6.701 c
h
f
Q
q
[33.032215 0 0 33.032215 1979.9967 5528.9272] cm
6.76 29.280001 m
3.6001 29.280001 l
3.6001 40 l
0.0001 40 l
0.0001 10 l
7.320101 10 l
9.960101 10 12.020101 10.85332 13.500101 12.56 c
14.980102 14.266679 15.720101 16.666799 15.720101 19.759998 c
15.720101 21.146698 15.506782 22.419998 15.080101 23.579998 c
14.65342 24.739998 14.046701 25.739998 13.260101 26.579998 c
12.473501 27.419998 11.526701 28.079998 10.420101 28.559998 c
9.313501 29.039997 8.093401 29.279997 6.760101 29.279997 c
6.76 29.280001 l
h
6.6 13.520001 m
3.6 13.520118 l
3.6 25.680119 l
6.2 25.680119 l
7.32 25.680119 8.2533 25.520119 9 25.200119 c
9.7467 24.880119 10.3467 24.446798 10.8 23.90012 c
11.253301 23.353441 11.58 22.720119 11.780001 22.00012 c
11.980001 21.280121 12.080001 20.506821 12.080001 19.68012 c
12.080001 18.773441 12.006681 17.94672 11.860001 17.200121 c
11.713321 16.453522 11.440001 15.806721 11.040001 15.26012 c
10.640001 14.71352 10.080001 14.28676 9.360001 13.980121 c
8.64 13.673481 7.72 13.520121 6.6 13.520121 c
6.6 13.520001 l
h
30.611 40 m
30.570999 26.76 l
22.171 26.76 l
22.211 40 l
18.611 40 l
18.611 10 l
22.211 10 l
22.171 23.200001 l
30.570999 23.200001 l
30.611 10.000001 l
34.250999 10.000001 l
34.250999 40 l
30.611 40 l
h
38.382 40 m
38.382 10 l
41.382 10 l
41.382 40 l
38.382 40 l
h
45.432999 40 m
45.432999 10 l
48.833 10 l
48.833 36.400002 l
57.792999 36.400002 l
57.792999 40 l
45.432999 40 l
h
60.644001 40 m
60.644001 10 l
63.644001 10 l
63.644001 40 l
60.644001 40 l
h
74.455002 29.280001 m
71.295105 29.280001 l
71.295105 40 l
67.695107 40 l
67.695107 10 l
75.015106 10 l
77.655106 10 79.715103 10.85332 81.195107 12.56 c
82.67511 14.266679 83.415108 16.666799 83.415108 19.759998 c
83.415108 21.146698 83.20179 22.419998 82.775108 23.579998 c
82.348427 24.739998 81.741707 25.739998 80.955109 26.579998 c
80.16851 27.419998 79.22171 28.079998 78.115112 28.559998 c
77.008514 29.039997 75.788414 29.279997 74.455109 29.279997 c
74.455002 29.280001 l
h
74.294998 13.520001 m
71.294998 13.520118 l
71.294998 25.680119 l
73.894997 25.680119 l
75.014999 25.680119 75.948296 25.520119 76.695 25.200119 c
77.441704 24.880119 78.041702 24.446798 78.495003 23.90012 c
78.948303 23.353441 79.275002 22.720119 79.475006 22.00012 c
79.675011 21.280121 79.775009 20.506821 79.775009 19.68012 c
79.775009 18.773441 79.701691 17.94672 79.555008 17.200121 c
79.408325 16.453522 79.13501 15.806721 78.735008 15.26012 c
78.335007 14.71352 77.775009 14.28676 77.055008 13.980121 c
76.335007 13.673481 75.415009 13.520121 74.295006 13.520121 c
74.294998 13.520001 l
h
108.717003 33.639999 m
108.530319 34.49332 108.25708 35.299801 107.897079 36.059799 c
107.537079 36.819798 107.063759 37.493099 106.477081 38.0798 c
105.890404 38.6665 105.177078 39.133202 104.337082 39.479801 c
103.497086 39.826401 102.517082 39.999802 101.397079 39.999802 c
94.07708 39.999802 l
94.07708 9.999802 l
101.117081 9.999802 l
103.090378 9.999802 104.777084 10.499802 106.177078 11.499802 c
107.577072 12.499802 108.477081 14.173101 108.877075 16.519802 c
108.930397 16.946482 108.983719 17.593203 109.037033 18.459803 c
109.090347 19.326403 109.130356 20.313202 109.157036 21.419804 c
109.183716 22.526405 109.197037 23.693203 109.197037 24.919804 c
109.197037 26.146404 109.17704 27.326504 109.137039 28.459805 c
109.097038 29.593105 109.043716 30.619804 108.977036 31.539804 c
108.910355 32.459805 108.823677 33.159805 108.716995 33.639805 c
108.717003 33.639999 l
h
100.796997 13.520001 m
97.356995 13.520079 l
97.356995 36.400078 l
101.316994 36.400078 l
102.356995 36.400078 103.210297 36.033398 103.876991 35.300079 c
104.543686 34.566761 105.036995 33.760078 105.356995 32.880081 c
105.463676 32.586761 105.550354 32.02676 105.617035 31.200081 c
105.683716 30.373402 105.737038 29.42008 105.777039 28.34008 c
105.817039 27.26008 105.837036 26.120081 105.837036 24.92008 c
105.837036 23.720079 105.823715 22.586781 105.797035 21.520081 c
105.770355 20.453381 105.723679 19.520081 105.656998 18.720081 c
105.590317 17.920082 105.516998 17.373381 105.436996 17.080082 c
105.276993 16.653402 105.097 16.226723 104.896996 15.800082 c
104.696991 15.373442 104.423676 14.986722 104.076996 14.640082 c
103.730316 14.293443 103.296997 14.020083 102.776993 13.820083 c
102.256989 13.620083 101.596992 13.520083 100.796989 13.520083 c
100.796997 13.520001 l
h
120.447998 40.360001 m
118.021301 40.360001 116.127998 39.646721 114.767998 38.220001 c
113.407997 36.793282 112.727997 34.733299 112.727997 32.040001 c
112.727997 10 l
116.208 10 l
116.208 31.959999 l
116.208 32.52 116.281319 33.0933 116.428001 33.68 c
116.574684 34.266701 116.807999 34.786701 117.127998 35.240002 c
117.447998 35.693302 117.87468 36.066643 118.407997 36.360001 c
118.941315 36.653358 119.594597 36.799999 120.367996 36.799999 c
121.247993 36.799999 121.981293 36.673321 122.567993 36.419998 c
123.154694 36.166676 123.621391 35.799999 123.967995 35.32 c
124.314598 34.84 124.561356 34.266701 124.708038 33.599998 c
124.854721 32.933296 124.92804 32.199997 124.92804 31.399998 c
124.92804 9.999998 l
128.368042 9.999998 l
128.368042 32.040001 l
128.368042 34.786701 127.714722 36.860001 126.408043 38.260002 c
125.101364 39.660004 123.114639 40.360001 120.448044 40.360001 c
120.447998 40.360001 l
h
132.699005 40 m
132.699005 10 l
136.098999 10 l
136.098999 36.400002 l
145.059006 36.400002 l
145.059006 40 l
132.699005 40 l
h
154.229996 40.360001 m
151.723297 40.360001 149.836792 39.65332 148.569992 38.240002 c
147.303192 36.826683 146.669998 34.760002 146.669998 32.040001 c
146.669998 18.040001 l
146.669998 15.293301 147.309998 13.220001 148.589996 11.820002 c
149.869995 10.420002 151.910004 9.720001 154.709991 9.720001 c
157.269989 9.720001 159.176788 10.426682 160.429993 11.840001 c
161.683197 13.253321 162.309998 15.293301 162.309998 17.960001 c
162.309998 32.040001 l
162.309998 34.786701 161.696671 36.860001 160.470001 38.260002 c
159.243332 39.660004 157.1633 40.360001 154.229996 40.360001 c
h
158.869995 17.92 m
158.869995 17.333321 158.796722 16.7533 158.65004 16.18 c
158.503357 15.606701 158.270035 15.0934 157.950043 14.64 c
157.630051 14.186601 157.203369 13.820001 156.670044 13.54 c
156.136719 13.259999 155.470047 13.12 154.670044 13.12 c
153.763367 13.12 153.016647 13.24 152.430038 13.48 c
151.84343 13.719999 151.376633 14.073319 151.030045 14.539999 c
150.683456 15.006679 150.443359 15.56 150.310043 16.199999 c
150.176727 16.839998 150.110046 17.559999 150.110046 18.359999 c
150.110046 31.839998 l
150.110046 32.45332 150.176727 33.059998 150.310043 33.66 c
150.443359 34.260002 150.663361 34.799999 150.970047 35.279999 c
151.276733 35.759998 151.696732 36.146679 152.230042 36.439999 c
152.763351 36.733318 153.430038 36.879997 154.230042 36.879997 c
155.136719 36.879997 155.890045 36.766678 156.490036 36.539997 c
157.090027 36.313316 157.563339 35.986637 157.910034 35.559956 c
158.256729 35.133274 158.503387 34.613277 158.65007 33.999954 c
158.796753 33.386631 158.870071 32.706654 158.870071 31.959953 c
158.870071 17.919952 l
158.869995 17.92 l
h
173.601 40.360001 m
171.0943 40.360001 169.20779 39.646679 167.94099 38.220001 c
166.674194 36.793324 166.041 34.733299 166.041 32.040001 c
166.041 18.040001 l
166.041 15.293301 166.681 13.220001 167.961 11.820002 c
169.241 10.420002 171.2543 9.720001 174.00099 9.720001 c
176.58769 9.720001 178.5078 10.426682 179.76099 11.840001 c
181.01418 13.253321 181.64099 15.293301 181.64099 17.960001 c
181.64099 20.76 l
178.161 20.76 l
178.161 17.559999 l
178.161 16.97332 178.101 16.4 177.981 15.839999 c
177.86101 15.279999 177.64101 14.779999 177.321 14.339999 c
177.00099 13.9 176.56767 13.54668 176.021 13.279999 c
175.47432 13.013318 174.77429 12.879999 173.92099 12.879999 c
173.06769 12.879999 172.35439 12.999999 171.78099 13.239999 c
171.2076 13.479999 170.7477 13.819999 170.40099 14.259998 c
170.05428 14.699998 169.8143 15.239998 169.68098 15.879998 c
169.54767 16.519999 169.48099 17.239998 169.48099 18.039999 c
169.48099 32.199997 l
169.48099 33.826698 169.78099 35.039997 170.38098 35.839996 c
170.98097 36.639996 172.08098 37.039997 173.68098 37.039997 c
175.44098 37.039997 176.64099 36.619999 177.28099 35.779999 c
177.92099 34.939999 178.241 33.786697 178.241 32.32 c
178.241 27.52 l
172.601 27.48 l
172.601 24.08 l
181.64099 24.120001 l
181.64099 32.040001 l
181.64099 34.760002 181.021 36.826801 179.78099 38.240002 c
178.54099 39.653202 176.48099 40.360001 173.601 40.360001 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
